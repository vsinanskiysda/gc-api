<?php

declare(strict_types=1);

/*
 * GCAPIForESTLabLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace GCAPIForESTLabLib\Controllers;

use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use GCAPIForESTLabLib\Exceptions\ApiException;
use GCAPIForESTLabLib\Exceptions\M400ErrorException;
use GCAPIForESTLabLib\Exceptions\M401ErrorException;
use GCAPIForESTLabLib\Exceptions\M404ErrorException;
use GCAPIForESTLabLib\Models\AuthResponse;
use GCAPIForESTLabLib\Models\Entry;
use GCAPIForESTLabLib\Models\RefreshResponse;
use GCAPIForESTLabLib\Models\Sample;
use GCAPIForESTLabLib\Models\StatusResponse;
use GCAPIForESTLabLib\Utils\FileWrapper;

class APIController extends BaseController
{
    /**
     * Auth and generate tokens
     *
     * @param string $clientId
     * @param string $clientSecret
     * @param string $grantType
     *
     * @return AuthResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function auth(string $clientId, string $clientSecret, string $grantType): AuthResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/wp-json/api/oauth/auth')
            ->parameters(
                QueryParam::init('client_id', $clientId),
                QueryParam::init('client_secret', $clientSecret),
                QueryParam::init('grant_type', $grantType)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(400, ErrorType::init('Bad request', M400ErrorException::class))
            ->throwErrorOn(401, ErrorType::init('Forbidden', M401ErrorException::class))
            ->throwErrorOn(404, ErrorType::init('Bad request', M404ErrorException::class))
            ->type(AuthResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Refresh access token tokens
     *
     * @param string $refreshToken
     *
     * @return RefreshResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function refreshAccessToken(string $refreshToken): RefreshResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/wp-json/api/oauth/auth/refresh')
            ->parameters(QueryParam::init('refresh_token', $refreshToken));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(400, ErrorType::init('Bad request', M400ErrorException::class))
            ->throwErrorOn(401, ErrorType::init('Forbidden', M401ErrorException::class))
            ->throwErrorOn(404, ErrorType::init('Bad request', M404ErrorException::class))
            ->type(RefreshResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Show all active entries (Optional)
     *
     * @param string $authorization
     *
     * @return Entry[] Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fm2247List(string $authorization): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/wp-json/api/fm2247/list')
            ->parameters(HeaderParam::init('Authorization', $authorization));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(400, ErrorType::init('Bad request'))
            ->throwErrorOn(401, ErrorType::init('Forbidden'))
            ->throwErrorOn(404, ErrorType::init('Bad request'))
            ->type(Entry::class, 1);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * GET - to retrieve single Entry data. PUT - to update entry
     *
     * @param string $authorization
     *
     * @return Entry Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fm2247PO9999View(string $authorization): Entry
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/wp-json/api/fm2247/PO#9999')
            ->parameters(HeaderParam::init('Authorization', $authorization));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(400, ErrorType::init('Bad request', M400ErrorException::class))
            ->throwErrorOn(401, ErrorType::init('Forbidden', M401ErrorException::class))
            ->throwErrorOn(404, ErrorType::init('Bad request', M404ErrorException::class))
            ->type(Entry::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * GET - to retrieve single Entry data. PUT - to update entry
     *
     * @param string $authorization
     * @param Sample[] $samples
     *
     * @return Entry Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fm2247PO9999Update(string $authorization, array $samples): Entry
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/wp-json/api/fm2247/PO#9999')
            ->parameters(HeaderParam::init('Authorization', $authorization), QueryParam::init('samples', $samples));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(400, ErrorType::init('Bad request', M400ErrorException::class))
            ->throwErrorOn(401, ErrorType::init('Forbidden', M401ErrorException::class))
            ->throwErrorOn(404, ErrorType::init('Bad request', M404ErrorException::class))
            ->type(Entry::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Use multipart/form-data to upload a PDF file with laboratory results
     *
     * @param string $authorization
     * @param FileWrapper|null $file
     *
     * @return Entry Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fm2247PO9999UploadResult(string $authorization, ?FileWrapper $file = null): Entry
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/wp-json/api/fm2247/PO#9999/upload-results')
            ->parameters(HeaderParam::init('Authorization', $authorization), FormParam::init('file', $file));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(400, ErrorType::init('Bad request', M400ErrorException::class))
            ->throwErrorOn(401, ErrorType::init('Forbidden', M401ErrorException::class))
            ->throwErrorOn(404, ErrorType::init('Bad request', M404ErrorException::class))
            ->type(Entry::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieve api status
     *
     * @return StatusResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function status(): StatusResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/wp-json/api/status');

        $_resHandler = $this->responseHandler()->type(StatusResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
